/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scitix/aegis/pkg/apis/template/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AegisOpsTemplateLister helps list AegisOpsTemplates.
// All objects returned here must be treated as read-only.
type AegisOpsTemplateLister interface {
	// List lists all AegisOpsTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisOpsTemplate, err error)
	// AegisOpsTemplates returns an object that can list and get AegisOpsTemplates.
	AegisOpsTemplates(namespace string) AegisOpsTemplateNamespaceLister
	AegisOpsTemplateListerExpansion
}

// aegisOpsTemplateLister implements the AegisOpsTemplateLister interface.
type aegisOpsTemplateLister struct {
	indexer cache.Indexer
}

// NewAegisOpsTemplateLister returns a new AegisOpsTemplateLister.
func NewAegisOpsTemplateLister(indexer cache.Indexer) AegisOpsTemplateLister {
	return &aegisOpsTemplateLister{indexer: indexer}
}

// List lists all AegisOpsTemplates in the indexer.
func (s *aegisOpsTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.AegisOpsTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisOpsTemplate))
	})
	return ret, err
}

// AegisOpsTemplates returns an object that can list and get AegisOpsTemplates.
func (s *aegisOpsTemplateLister) AegisOpsTemplates(namespace string) AegisOpsTemplateNamespaceLister {
	return aegisOpsTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AegisOpsTemplateNamespaceLister helps list and get AegisOpsTemplates.
// All objects returned here must be treated as read-only.
type AegisOpsTemplateNamespaceLister interface {
	// List lists all AegisOpsTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisOpsTemplate, err error)
	// Get retrieves the AegisOpsTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AegisOpsTemplate, error)
	AegisOpsTemplateNamespaceListerExpansion
}

// aegisOpsTemplateNamespaceLister implements the AegisOpsTemplateNamespaceLister
// interface.
type aegisOpsTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AegisOpsTemplates in the indexer for a given namespace.
func (s aegisOpsTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AegisOpsTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisOpsTemplate))
	})
	return ret, err
}

// Get retrieves the AegisOpsTemplate from the indexer for a given namespace and name.
func (s aegisOpsTemplateNamespaceLister) Get(name string) (*v1alpha1.AegisOpsTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aegisopstemplate"), name)
	}
	return obj.(*v1alpha1.AegisOpsTemplate), nil
}
