/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scitix/aegis/pkg/apis/alert/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AegisAlertLister helps list AegisAlerts.
// All objects returned here must be treated as read-only.
type AegisAlertLister interface {
	// List lists all AegisAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisAlert, err error)
	// AegisAlerts returns an object that can list and get AegisAlerts.
	AegisAlerts(namespace string) AegisAlertNamespaceLister
	AegisAlertListerExpansion
}

// aegisAlertLister implements the AegisAlertLister interface.
type aegisAlertLister struct {
	indexer cache.Indexer
}

// NewAegisAlertLister returns a new AegisAlertLister.
func NewAegisAlertLister(indexer cache.Indexer) AegisAlertLister {
	return &aegisAlertLister{indexer: indexer}
}

// List lists all AegisAlerts in the indexer.
func (s *aegisAlertLister) List(selector labels.Selector) (ret []*v1alpha1.AegisAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisAlert))
	})
	return ret, err
}

// AegisAlerts returns an object that can list and get AegisAlerts.
func (s *aegisAlertLister) AegisAlerts(namespace string) AegisAlertNamespaceLister {
	return aegisAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AegisAlertNamespaceLister helps list and get AegisAlerts.
// All objects returned here must be treated as read-only.
type AegisAlertNamespaceLister interface {
	// List lists all AegisAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisAlert, err error)
	// Get retrieves the AegisAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AegisAlert, error)
	AegisAlertNamespaceListerExpansion
}

// aegisAlertNamespaceLister implements the AegisAlertNamespaceLister
// interface.
type aegisAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AegisAlerts in the indexer for a given namespace.
func (s aegisAlertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AegisAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisAlert))
	})
	return ret, err
}

// Get retrieves the AegisAlert from the indexer for a given namespace and name.
func (s aegisAlertNamespaceLister) Get(name string) (*v1alpha1.AegisAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aegisalert"), name)
	}
	return obj.(*v1alpha1.AegisAlert), nil
}
