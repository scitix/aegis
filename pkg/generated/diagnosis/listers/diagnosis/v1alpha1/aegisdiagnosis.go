/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scitix/aegis/pkg/apis/diagnosis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AegisDiagnosisLister helps list AegisDiagnosises.
// All objects returned here must be treated as read-only.
type AegisDiagnosisLister interface {
	// List lists all AegisDiagnosises in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisDiagnosis, err error)
	// AegisDiagnosises returns an object that can list and get AegisDiagnosises.
	AegisDiagnosises(namespace string) AegisDiagnosisNamespaceLister
	AegisDiagnosisListerExpansion
}

// aegisDiagnosisLister implements the AegisDiagnosisLister interface.
type aegisDiagnosisLister struct {
	indexer cache.Indexer
}

// NewAegisDiagnosisLister returns a new AegisDiagnosisLister.
func NewAegisDiagnosisLister(indexer cache.Indexer) AegisDiagnosisLister {
	return &aegisDiagnosisLister{indexer: indexer}
}

// List lists all AegisDiagnosises in the indexer.
func (s *aegisDiagnosisLister) List(selector labels.Selector) (ret []*v1alpha1.AegisDiagnosis, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisDiagnosis))
	})
	return ret, err
}

// AegisDiagnosises returns an object that can list and get AegisDiagnosises.
func (s *aegisDiagnosisLister) AegisDiagnosises(namespace string) AegisDiagnosisNamespaceLister {
	return aegisDiagnosisNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AegisDiagnosisNamespaceLister helps list and get AegisDiagnosises.
// All objects returned here must be treated as read-only.
type AegisDiagnosisNamespaceLister interface {
	// List lists all AegisDiagnosises in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisDiagnosis, err error)
	// Get retrieves the AegisDiagnosis from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AegisDiagnosis, error)
	AegisDiagnosisNamespaceListerExpansion
}

// aegisDiagnosisNamespaceLister implements the AegisDiagnosisNamespaceLister
// interface.
type aegisDiagnosisNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AegisDiagnosises in the indexer for a given namespace.
func (s aegisDiagnosisNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AegisDiagnosis, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisDiagnosis))
	})
	return ret, err
}

// Get retrieves the AegisDiagnosis from the indexer for a given namespace and name.
func (s aegisDiagnosisNamespaceLister) Get(name string) (*v1alpha1.AegisDiagnosis, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aegisdiagnosis"), name)
	}
	return obj.(*v1alpha1.AegisDiagnosis), nil
}
