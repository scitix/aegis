/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	diagnosisv1alpha1 "github.com/scitix/aegis/pkg/apis/diagnosis/v1alpha1"
	scheme "github.com/scitix/aegis/pkg/generated/diagnosis/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// AegisDiagnosisesGetter has a method to return a AegisDiagnosisInterface.
// A group's client should implement this interface.
type AegisDiagnosisesGetter interface {
	AegisDiagnosises(namespace string) AegisDiagnosisInterface
}

// AegisDiagnosisInterface has methods to work with AegisDiagnosis resources.
type AegisDiagnosisInterface interface {
	Create(ctx context.Context, aegisDiagnosis *diagnosisv1alpha1.AegisDiagnosis, opts v1.CreateOptions) (*diagnosisv1alpha1.AegisDiagnosis, error)
	Update(ctx context.Context, aegisDiagnosis *diagnosisv1alpha1.AegisDiagnosis, opts v1.UpdateOptions) (*diagnosisv1alpha1.AegisDiagnosis, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, aegisDiagnosis *diagnosisv1alpha1.AegisDiagnosis, opts v1.UpdateOptions) (*diagnosisv1alpha1.AegisDiagnosis, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*diagnosisv1alpha1.AegisDiagnosis, error)
	List(ctx context.Context, opts v1.ListOptions) (*diagnosisv1alpha1.AegisDiagnosisList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *diagnosisv1alpha1.AegisDiagnosis, err error)
	AegisDiagnosisExpansion
}

// aegisDiagnosises implements AegisDiagnosisInterface
type aegisDiagnosises struct {
	*gentype.ClientWithList[*diagnosisv1alpha1.AegisDiagnosis, *diagnosisv1alpha1.AegisDiagnosisList]
}

// newAegisDiagnosises returns a AegisDiagnosises
func newAegisDiagnosises(c *AegisV1alpha1Client, namespace string) *aegisDiagnosises {
	return &aegisDiagnosises{
		gentype.NewClientWithList[*diagnosisv1alpha1.AegisDiagnosis, *diagnosisv1alpha1.AegisDiagnosisList](
			"aegisdiagnosises",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *diagnosisv1alpha1.AegisDiagnosis { return &diagnosisv1alpha1.AegisDiagnosis{} },
			func() *diagnosisv1alpha1.AegisDiagnosisList { return &diagnosisv1alpha1.AegisDiagnosisList{} },
		),
	}
}
