/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/scitix/aegis/pkg/apis/nodecheck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AegisNodeHealthCheckLister helps list AegisNodeHealthChecks.
// All objects returned here must be treated as read-only.
type AegisNodeHealthCheckLister interface {
	// List lists all AegisNodeHealthChecks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisNodeHealthCheck, err error)
	// AegisNodeHealthChecks returns an object that can list and get AegisNodeHealthChecks.
	AegisNodeHealthChecks(namespace string) AegisNodeHealthCheckNamespaceLister
	AegisNodeHealthCheckListerExpansion
}

// aegisNodeHealthCheckLister implements the AegisNodeHealthCheckLister interface.
type aegisNodeHealthCheckLister struct {
	indexer cache.Indexer
}

// NewAegisNodeHealthCheckLister returns a new AegisNodeHealthCheckLister.
func NewAegisNodeHealthCheckLister(indexer cache.Indexer) AegisNodeHealthCheckLister {
	return &aegisNodeHealthCheckLister{indexer: indexer}
}

// List lists all AegisNodeHealthChecks in the indexer.
func (s *aegisNodeHealthCheckLister) List(selector labels.Selector) (ret []*v1alpha1.AegisNodeHealthCheck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisNodeHealthCheck))
	})
	return ret, err
}

// AegisNodeHealthChecks returns an object that can list and get AegisNodeHealthChecks.
func (s *aegisNodeHealthCheckLister) AegisNodeHealthChecks(namespace string) AegisNodeHealthCheckNamespaceLister {
	return aegisNodeHealthCheckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AegisNodeHealthCheckNamespaceLister helps list and get AegisNodeHealthChecks.
// All objects returned here must be treated as read-only.
type AegisNodeHealthCheckNamespaceLister interface {
	// List lists all AegisNodeHealthChecks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AegisNodeHealthCheck, err error)
	// Get retrieves the AegisNodeHealthCheck from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AegisNodeHealthCheck, error)
	AegisNodeHealthCheckNamespaceListerExpansion
}

// aegisNodeHealthCheckNamespaceLister implements the AegisNodeHealthCheckNamespaceLister
// interface.
type aegisNodeHealthCheckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AegisNodeHealthChecks in the indexer for a given namespace.
func (s aegisNodeHealthCheckNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AegisNodeHealthCheck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AegisNodeHealthCheck))
	})
	return ret, err
}

// Get retrieves the AegisNodeHealthCheck from the indexer for a given namespace and name.
func (s aegisNodeHealthCheckNamespaceLister) Get(name string) (*v1alpha1.AegisNodeHealthCheck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aegisnodehealthcheck"), name)
	}
	return obj.(*v1alpha1.AegisNodeHealthCheck), nil
}
